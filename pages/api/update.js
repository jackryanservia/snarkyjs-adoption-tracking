import { generateBuildId } from "@/next.config";
import { GoogleSpreadsheet } from "google-spreadsheet";

// Initialize the sheet - doc ID is the long id in the sheets URL
const doc = new GoogleSpreadsheet(
  "1lsPIpLGWYiH2zA0MxKdI0asrRc4l9arHJbzxSOX4twU"
);

const queries = {
  SnarkyJS: "path%3A%2F%28%5E%7C%5C%2F%29package%5C.json%24%2F+snarkyjs",
  Circom: "path%3A%2F%28%5E%7C%5C%2F%29package%5C.json%24%2F+snarkjs",
  Leo: "path%3A%2F%28%5E%7C%5C%2F%29program%5C.json%24%2F+leo",
  Noir: "path%3A%2F%28%5E%7C%5C%2F%29package%5C.json%24%2F+noir-lang%2Faztec_backend",
  Cairo: "path%3A%2F%28%5E%7C%5C%2F%29.*%5C.cairo%24%2F+lang+starknet",
  RISC0: "path%3A%2F%28%5E%7C%5C%2F%29cargo.toml%24%2F+risc0-zkp",
  ZoKrates: "path%3A%2F%28%5E%7C%5C%2F%29package%5C.json%24%2F+zokrates-js",
  Gnark: "%2F%22github.com%5C%2Fconsensys%5C%2Fgnark%5C%2Ffrontend%22%2F",
};

const githubHeaders = new Headers({
  Accept: "application/json",
  Cookie: process.env.GITHUB_COOKIE,
});

const getNumberOfResults = (query) =>
  fetch("https://github.com/search/blackbird_count?q=" + query, {
    headers: githubHeaders,
    method: "GET",
  }).then(
    (res) =>
      res.json().then(
        (data) => data.count,
        (error) => "INVALID_RESPONSE"
      ),
    console.log
  );

export default async function handler(req, res) {
  // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
  await doc.useServiceAccountAuth({
    // env var values are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    private_key: process.env.GOOGLE_PRIVATE_KEY.split(String.raw`\n`).join(
      "\n"
    ),
  });

  // Fix this + queries object? How should people add or alter queries?
  const adoptionStats = {
    UnixTime: Date.now(),
    Time: "=EPOCHTODATE(INDIRECT(ADDRESS(ROW(), COLUMN()-1, 4)), 2)",
    SnarkyJS: await getNumberOfResults(queries.SnarkyJS),
    Circom: await getNumberOfResults(queries.Circom),
    Leo: await getNumberOfResults(queries.Leo),
    Noir: await getNumberOfResults(queries.Noir),
    Cairo: await getNumberOfResults(queries.Cairo),
    RISC0: await getNumberOfResults(queries.RISC0),
    ZoKrates: await getNumberOfResults(queries.ZoKrates),
    Gnark: await getNumberOfResults(queries.Gnark),
  };

  await doc.loadInfo(); // loads sheets
  const sheet = doc.sheetsById[0]; // the first sheet

  console.log(adoptionStats);

  const newRow = await sheet.addRow({
    ...adoptionStats,
  });

  res.status(200).json(adoptionStats);
}
